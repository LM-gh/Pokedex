{"version":3,"sources":["components/NavBar.js","components/Jumbotron.js","components/Pagination.js","components/PokemonDetails.js","components/TablaPokemones.js","App.js","index.js"],"names":["NavBar","className","href","Jumbotron","total","id","Pagination","pokemonesPerPage","pokemonesTotales","paginate","pageNumbers","i","Math","ceil","push","map","number","to","onClick","PokemonDetails","match","currentPage","useState","loading","setLoading","pokemonData","setPokemonData","toSlice","pokemonName","path","replace","useEffect","a","fetch","BASE_URL","url","json","response","err","console","error","fetchPokemonData","capitalizarPrimerLetra","name","src","sprites","front_default","alt","Object","keys","types","index","subindex","type","height","weight","stats","stat","base_stat","palabra","charAt","toUpperCase","slice","TablaPokemones","pokemones","handleButtonID","grid","length","element","data-id","App","totalPokemones","setTotalPokemones","setPokemones","pokemon","setCurrentPokemon","setCurrentPage","fetchPokemons","then","r","results","Promise","all","spriteData","sprite","res","count","log","exact","render","props","event","currentTarget","dataset","pageNumber","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57899b17.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const NavBar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-danger\">\r\n      <a className=\"navbar-brand\" href=\"/Pokedex/\">\r\n        Pokedex\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Jumbotron = (total) => {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container-fluid\" id=\"jumbotron-texto\">\r\n        <h1 className=\"display-4\">Hola!</h1>\r\n        <p className=\"lead\">\r\n          Esta aplicación te va a mostrar todos los Pokemones con sus\r\n          respectivas habilidades.\r\n        </p>\r\n        <hr className=\"my-4\" />\r\n        <p>\r\n          Pokémon are the creatures that inhabit the world of the Pokémon games.\r\n          They can be caught using Pokéballs and trained by battling with other\r\n          Pokémon. Each Pokémon belongs to a specific species but may take on a\r\n          variant which makes it differ from other Pokémon of the same species,\r\n          such as base stats, available abilities and typings.\r\n        </p>\r\n        <p className=\"lead\">\r\n          Hay un total de <strong id=\"total-pokemones\">{total.total}</strong>{\" \"}\r\n          Pokemones. Consultalos en el siguiente catálogo.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Pagination = ({\r\n  pokemonesPerPage,\r\n  pokemonesTotales,\r\n  paginate,\r\n}) => {\r\n  let pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(pokemonesTotales / pokemonesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <div id=\"div-pagination\">\r\n      <nav>\r\n        <ul className=\"pagination\">\r\n          {pageNumbers.map((number) => (\r\n            <li key={number} className=\"page-item\">\r\n              <Link to={\"/Pokedex/\" + number}>\r\n                <a\r\n                  onClick={() => paginate(number)}\r\n                  href={number}\r\n                  className=\"page-link text-danger\"\r\n                >\r\n                  {number}\r\n                </a>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BASE_URL } from \"../App\";\r\n\r\nexport const PokemonDetails = ({ match, currentPage }) => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [pokemonData, setPokemonData] = useState({});\r\n\r\n  const toSlice = `/Pokedex/${currentPage}/`;\r\n\r\n  let pokemonName = match.path.replace(toSlice, \"\");\r\n\r\n  useEffect(() => {\r\n    const fetchPokemonData = async () => {\r\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n      const url = await fetch(proxyurl + BASE_URL + pokemonName);\r\n      const response = await url.json();\r\n      try {\r\n        setPokemonData(response);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    fetchPokemonData();\r\n  }, [pokemonName]);\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {loading ? (\r\n        <h1>Cargando data...</h1>\r\n      ) : (\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <p className=\"h1\">\r\n                Stats para {capitalizarPrimerLetra(pokemonData.name)}:{\" \"}\r\n              </p>\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div className=\"card\">\r\n                    <img\r\n                      src={pokemonData.sprites.front_default}\r\n                      className=\"img-thumbnail\"\r\n                      alt=\"...\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Muestra stats, peso y tipo */}\r\n          <div className=\"container-fluid\" id=\"stats, peso y tipo\">\r\n            <div className=\"row\" id=\"types\">\r\n              {Object.keys(pokemonData.types).map((index, subindex) => {\r\n                return (\r\n                  <div className=\"col-6\">\r\n                    <p className=\"h4\">\r\n                      Type #{subindex + 1}:{\" \"}\r\n                      {capitalizarPrimerLetra(\r\n                        pokemonData.types[index].type.name\r\n                      )}{\" \"}\r\n                    </p>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            {/* Muestra height and weight */}\r\n            <div className=\"row\" id=\"height and weight\">\r\n              <div className=\"col-6\">\r\n                <p className=\"h4\">Height: {pokemonData.height} </p>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <p className=\"h4\">Weight: {pokemonData.weight} </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Muestra stats y su valor */}\r\n            <div className=\"row\" id=\"stats\">\r\n              {Object.keys(pokemonData.stats).map((index) => {\r\n                return (\r\n                  <div className=\"col\">\r\n                    <ul className=\"list-group\">\r\n                      <li\r\n                        className=\"list-group-item align-items-center\"\r\n                        key={index}\r\n                      >\r\n                        {capitalizarPrimerLetra(\r\n                          pokemonData.stats[index].stat.name\r\n                        )}\r\n                        :{\" \"}\r\n                        <span className=\"badge badge-primary badge-pill\">\r\n                          {pokemonData.stats[index].base_stat}\r\n                        </span>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function capitalizarPrimerLetra(palabra) {\r\n  palabra = palabra.charAt(0).toUpperCase() + palabra.slice(1);\r\n  return palabra;\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { capitalizarPrimerLetra } from \"./PokemonDetails\";\r\n\r\nexport const TablaPokemones = ({ pokemones, currentPage, handleButtonID }) => {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < pokemones.length; i++) {\r\n    grid.push(i);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\" id=\"tabla-pokemones\">\r\n      <div className=\"row\">\r\n        {grid.map((element, index) => {\r\n          return (\r\n            <div className=\"col-3\" key={index}>\r\n              <div className=\"card\">\r\n                <div className=\"h-25 w-50\">\r\n                  <img\r\n                    className=\"card-img-top\"\r\n                    src={pokemones[index][\"sprite\"]}\r\n                    alt={\r\n                      pokemones[index][\"sprite\"] === null\r\n                        ? \"Sprite no disponible para este Pokemon\"\r\n                        : \"Cargando sprite...\"\r\n                    }\r\n                  />\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">\r\n                    {capitalizarPrimerLetra(pokemones[index][\"name\"])}\r\n                  </h5>\r\n                  <Link\r\n                    to={\r\n                      \"/Pokedex/\" +\r\n                      currentPage +\r\n                      \"/\" +\r\n                      capitalizarPrimerLetra(pokemones[index][\"name\"])\r\n                    }\r\n                  >\r\n                    <a\r\n                      href={\r\n                        \"/Pokedex/\" +\r\n                        currentPage +\r\n                        \"/\" +\r\n                        pokemones[index][\"name\"]\r\n                      }\r\n                      className=\"btn btn-primary\"\r\n                      key={pokemones[index][\"name\"]}\r\n                      data-id={pokemones[index][\"name\"]}\r\n                      onClick={handleButtonID}\r\n                    >\r\n                      Ver detalles\r\n                    </a>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect, Fragment } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { NavBar } from \"./components/NavBar\";\r\nimport { Jumbotron } from \"./components/Jumbotron\";\r\nimport { Pagination } from \"./components/Pagination\";\r\nimport { TablaPokemones } from \"./components/TablaPokemones\";\r\nimport { PokemonDetails } from \"./components/PokemonDetails\";\r\n\r\nexport const BASE_URL = \"https://pokeapi.co/api/v2/pokemon/\";\r\n\r\nconst App = () => {\r\n  const [totalPokemones, setTotalPokemones] = useState(null);\r\n  const [pokemones, setPokemones] = useState([]);\r\n  const [pokemonesPerPage] = useState(20);\r\n  const [pokemon, setCurrentPokemon] = useState(null);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const lastPokemonIndex = currentPage * pokemonesPerPage;\r\n  const firstPokemonIndex = lastPokemonIndex - pokemonesPerPage;\r\n\r\n  useEffect(() => {\r\n    const fetchPokemons = async () => {\r\n      let pokemones = await fetch(\r\n        `${BASE_URL}?offset=${\r\n          (currentPage - 1) * pokemonesPerPage\r\n        }&limit=${pokemonesPerPage}`\r\n      )\r\n        .then((r) => r.json())\r\n        .then((r) => r.results);\r\n      await Promise.all(\r\n        pokemones.map(async (pokemon, index) => {\r\n          const url = await fetch(pokemon.url);\r\n          const response = await url.json();\r\n          const sprites = await response.sprites;\r\n          const spriteData = sprites.front_default;\r\n          pokemones[index].sprite = spriteData;\r\n        })\r\n      );\r\n\r\n      const total = await fetch(BASE_URL);\r\n      const res = await total.json();\r\n      const count = await res.count;\r\n      setTotalPokemones(count);\r\n      setPokemones(pokemones);\r\n    };\r\n    try {\r\n      setLoading(true);\r\n      fetchPokemons();\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }, [currentPage, pokemonesPerPage]);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  const handleButtonID = (event) =>\r\n    setCurrentPokemon(event.currentTarget.dataset.id);\r\n\r\n  return (\r\n    <Router>\r\n      <NavBar />\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path={\"/Pokedex/\" + currentPage + \"/\" + pokemon}\r\n          render={(props) => (\r\n            <PokemonDetails {...props} currentPage={currentPage} />\r\n          )}\r\n        />\r\n        <Route path={\"/Pokedex/\"}>\r\n          <Jumbotron total={totalPokemones} />\r\n          {loading ? (\r\n            <p className=\"h1\">Cargando data de los Pokemones...</p>\r\n          ) : (\r\n            <Fragment>\r\n              <TablaPokemones\r\n                pokemones={pokemones}\r\n                currentPage={currentPage}\r\n                handleButtonID={handleButtonID}\r\n              />\r\n              <Pagination\r\n                pokemonesPerPage={pokemonesPerPage}\r\n                pokemonesTotales={totalPokemones}\r\n                paginate={paginate}\r\n              />\r\n            </Fragment>\r\n          )}\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}