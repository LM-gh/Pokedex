{"version":3,"sources":["components/NavBar.js","components/Jumbotron.js","components/Pagination.js","components/PokemonDetails.js","components/TablaPokemones.js","App.js","index.js"],"names":["NavBar","className","href","Jumbotron","id","Pagination","pokemonesPerPage","pokemonesTotales","paginate","pageNumbers","currentPage","i","Math","ceil","push","map","number","to","onClick","PokemonDetails","match","useState","loading","setLoading","pokemonData","setPokemonData","pokemonName","path","slice","useEffect","a","fetch","BASE_URL","url","json","response","e","console","error","fetchPokemonData","capitalizarPrimerLetra","name","src","sprites","front_default","alt","Object","keys","types","index","subindex","type","height","weight","stats","stat","base_stat","palabra","charAt","toUpperCase","TablaPokemones","pokemones","handleButtonID","grid","length","$titulos","document","querySelectorAll","$imgs","textContent","setSprites","message","element","data-id","App","setPokemones","setCurrentPage","pokemon","setCurrentPokemon","lastPokemonIndex","firstPokemonIndex","currentPokemones","then","r","results","fetchPokemons","spriteData","sprite","obtenerSprites","exact","render","props","event","currentTarget","dataset","pageNumber","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.20c6330c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const NavBar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-danger\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Pokedex\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Jumbotron = () => {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container-fluid\" id=\"jumbotron-texto\">\r\n        <h1 className=\"display-4\">Hola!</h1>\r\n        <p className=\"lead\">\r\n          Esta aplicación te va a mostrar todos los Pokemones con sus\r\n          respectivas habilidades.\r\n        </p>\r\n        <hr className=\"my-4\" />\r\n        <p>\r\n          Pokémon are the creatures that inhabit the world of the Pokémon games.\r\n          They can be caught using Pokéballs and trained by battling with other\r\n          Pokémon. Each Pokémon belongs to a specific species but may take on a\r\n          variant which makes it differ from other Pokémon of the same species,\r\n          such as base stats, available abilities and typings.\r\n        </p>\r\n        <p className=\"lead\">\r\n          Hay un total de <strong id=\"total-pokemones\">1118</strong> Pokemones.\r\n          Consultalos en el siguiente catálogo.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Pagination = ({\r\n  pokemonesPerPage,\r\n  pokemonesTotales,\r\n  paginate,\r\n  currentPage,\r\n}) => {\r\n  let pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(pokemonesTotales / pokemonesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <div id=\"div-pagination\">\r\n      <nav>\r\n        <ul className=\"pagination\">\r\n          {pageNumbers.map((number) => (\r\n            <li key={number} className=\"page-item\">\r\n              <Link to={\"/\" + number}>\r\n                <a\r\n                  onClick={() => paginate(number)}\r\n                  href={number}\r\n                  className=\"page-link text-danger\"\r\n                >\r\n                  {number}\r\n                </a>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BASE_URL } from \"../App\";\r\n\r\nexport const PokemonDetails = ({ match, currentPage }) => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [pokemonData, setPokemonData] = useState({});\r\n\r\n  let pokemonName = match.path.slice(3);\r\n\r\n  useEffect(() => {\r\n    const fetchPokemonData = async () => {\r\n      const url = await fetch(`${BASE_URL}${pokemonName}`);\r\n      const response = await url.json();\r\n      try {\r\n        setPokemonData(response);\r\n        setLoading(false);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n\r\n    fetchPokemonData();\r\n  }, [pokemonName]);\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {loading ? (\r\n        <h1>Cargando data...</h1>\r\n      ) : (\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <p className=\"h1\">\r\n                Stats para {capitalizarPrimerLetra(pokemonData.name)}:{\" \"}\r\n              </p>\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div className=\"card\">\r\n                    <img\r\n                      src={pokemonData.sprites.front_default}\r\n                      className=\"img-thumbnail\"\r\n                      alt=\"...\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Muestra stats, peso y tipo */}\r\n          <div className=\"container-fluid\" id=\"stats, peso y tipo\">\r\n            <div className=\"row\" id=\"types\">\r\n              {Object.keys(pokemonData.types).map((index, subindex) => {\r\n                return (\r\n                  <div className=\"col-6\">\r\n                    <p className=\"h4\">\r\n                      Type #{subindex + 1}:{\" \"}\r\n                      {capitalizarPrimerLetra(\r\n                        pokemonData.types[index].type.name\r\n                      )}{\" \"}\r\n                    </p>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            {/* Muestra height and weight */}\r\n            <div className=\"row\" id=\"height and weight\">\r\n              <div className=\"col-6\">\r\n                <p className=\"h4\">Height: {pokemonData.height} </p>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <p className=\"h4\">Weight: {pokemonData.weight} </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Muestra stats y su valor */}\r\n            <div className=\"row\" id=\"stats\">\r\n              {Object.keys(pokemonData.stats).map((index) => {\r\n                return (\r\n                  <div className=\"col\">\r\n                    <ul className=\"list-group\">\r\n                      <li\r\n                        className=\"list-group-item align-items-center\"\r\n                        key={index}\r\n                      >\r\n                        {capitalizarPrimerLetra(\r\n                          pokemonData.stats[index].stat.name\r\n                        )}\r\n                        :{\" \"}\r\n                        <span className=\"badge badge-primary badge-pill\">\r\n                          {pokemonData.stats[index].base_stat}\r\n                        </span>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function capitalizarPrimerLetra(palabra) {\r\n  palabra = palabra.charAt(0).toUpperCase() + palabra.slice(1);\r\n  return palabra;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { capitalizarPrimerLetra } from \"./PokemonDetails\";\r\n\r\nexport const TablaPokemones = ({ pokemones, currentPage, handleButtonID }) => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < pokemones.length; i++) {\r\n    grid.push(i);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const $titulos = document.querySelectorAll(\".card-title\");\r\n    const $imgs = document.querySelectorAll(\".card-img-top\");\r\n\r\n    const setSprites = (pokemones) => {\r\n      for (let i = 0; i < pokemones.length; i++) {\r\n        $titulos[i].textContent = capitalizarPrimerLetra(pokemones[i][\"name\"]);\r\n        $imgs[i].src = pokemones[i][\"sprite\"];\r\n      }\r\n    };\r\n\r\n    try {\r\n      setSprites(pokemones);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      console.error(e.message);\r\n    }\r\n  }, [pokemones]);\r\n\r\n  return (\r\n    <div className=\"container-fluid\" id=\"tabla-pokemones\">\r\n      {loading ? (\r\n        <p>Cargando tabla de pokemones...</p>\r\n      ) : (\r\n        <div className=\"row\">\r\n          {grid.map((element, index) => {\r\n            return (\r\n              <div className=\"col-3\" key={index}>\r\n                <div className=\"card\">\r\n                  <div className=\"h-25 w-50\">\r\n                    <img\r\n                      className=\"card-img-top\"\r\n                      src={pokemones[index][\"sprite\"]}\r\n                      alt=\"Cargando sprite...\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{pokemones[index][\"name\"]}</h5>\r\n                    <Link\r\n                      to={\"/\" + currentPage + \"/\" + pokemones[index][\"name\"]}\r\n                    >\r\n                      <a\r\n                        href={\r\n                          \"/\" + currentPage + \"/\" + pokemones[index][\"name\"]\r\n                        }\r\n                        className=\"btn btn-primary\"\r\n                        key={pokemones[index][\"name\"]}\r\n                        data-id={pokemones[index][\"name\"]}\r\n                        onClick={handleButtonID}\r\n                      >\r\n                        Ver detalles\r\n                      </a>\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { NavBar } from \"./components/NavBar\";\r\nimport { Jumbotron } from \"./components/Jumbotron\";\r\nimport { Pagination } from \"./components/Pagination\";\r\nimport { TablaPokemones } from \"./components/TablaPokemones\";\r\nimport { PokemonDetails } from \"./components/PokemonDetails\";\r\n\r\nexport const BASE_URL = \"https://pokeapi.co/api/v2/pokemon/\";\r\n\r\nconst App = () => {\r\n  const pokemonesTotales = 1118;\r\n\r\n  const [pokemones, setPokemones] = useState([]);\r\n  const [pokemonesPerPage] = useState(20);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [pokemon, setCurrentPokemon] = useState(null);\r\n\r\n  // Get pokemonesPerPage\r\n  const lastPokemonIndex = currentPage * pokemonesPerPage;\r\n  const firstPokemonIndex = lastPokemonIndex - pokemonesPerPage;\r\n  const currentPokemones = pokemones.slice(firstPokemonIndex, lastPokemonIndex);\r\n\r\n  useEffect(() => {\r\n    const fetchPokemons = async () => {\r\n      const objectResponsePokemones = await fetch(\r\n        `${BASE_URL}?offset=0&limit=${pokemonesTotales}`\r\n      )\r\n        .then((r) => r.json())\r\n        .then((r) => r.results)\r\n        .then((r) => setPokemones(r));\r\n    };\r\n\r\n    fetchPokemons();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function obtenerSprites(pokemones) {\r\n      try {\r\n        for (let i = 0; i < pokemones.length; i++) {\r\n          let url = await fetch(pokemones[i][\"url\"]);\r\n          let response = await url.json();\r\n          let sprites = await response.sprites;\r\n          let spriteData = await sprites.front_default;\r\n          pokemones[i].sprite = spriteData;\r\n        }\r\n      } catch (e) {\r\n        console.error(e.message);\r\n      }\r\n    }\r\n    obtenerSprites(currentPokemones);\r\n  }, [currentPokemones]);\r\n\r\n  // Change page\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  const handleButtonID = (event) =>\r\n    setCurrentPokemon(event.currentTarget.dataset.id);\r\n\r\n  return (\r\n    <Router>\r\n      <NavBar />\r\n\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path={\"/\" + currentPage + \"/\" + pokemon}\r\n          render={(props) => (\r\n            <PokemonDetails {...props} currentPage={currentPage} />\r\n          )}\r\n        />\r\n\r\n        <Route path={\"/\"}>\r\n          <Jumbotron />\r\n          <TablaPokemones\r\n            pokemones={currentPokemones}\r\n            currentPage={currentPage}\r\n            handleButtonID={handleButtonID}\r\n          />\r\n          <Pagination\r\n            pokemonesPerPage={pokemonesPerPage}\r\n            pokemonesTotales={pokemonesTotales}\r\n            paginate={paginate}\r\n            currentPage={currentPage}\r\n          />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}